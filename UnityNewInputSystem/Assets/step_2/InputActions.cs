//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/step_2/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""ActionMapsAxis"",
            ""id"": ""981e11d5-a1f4-4b70-a944-a399847a25e3"",
            ""actions"": [
                {
                    ""name"": ""DoMoveForwardAxis"",
                    ""type"": ""Value"",
                    ""id"": ""82b4416b-8127-4413-81f7-702e99c6f303"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DOMoveRotate"",
                    ""type"": ""Button"",
                    ""id"": ""4ec642b6-3b7f-49be-a4ab-8a8097ece1a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DoFire"",
                    ""type"": ""Button"",
                    ""id"": ""f5b3d0fc-ecc5-48b4-a3dd-16b2304c588f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WS"",
                    ""id"": ""09d7cf1c-f7ae-4dce-8843-747bc7f02faa"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveForwardAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1cef216b-2b54-4266-9fd4-91548568dfa7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveForwardAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7f089d51-8882-4245-b564-ce44c34182da"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveForwardAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""DA"",
                    ""id"": ""2ce02c09-4d65-4529-a152-8e8852e7a377"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DOMoveRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f644914d-4bec-490f-af8c-26158b608ec8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DOMoveRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""733ac70b-3a6c-482f-928a-528f2305ac94"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DOMoveRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6f063437-7108-4353-b9ff-c6e4e137e4c7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ActionMapsAxis
        m_ActionMapsAxis = asset.FindActionMap("ActionMapsAxis", throwIfNotFound: true);
        m_ActionMapsAxis_DoMoveForwardAxis = m_ActionMapsAxis.FindAction("DoMoveForwardAxis", throwIfNotFound: true);
        m_ActionMapsAxis_DOMoveRotate = m_ActionMapsAxis.FindAction("DOMoveRotate", throwIfNotFound: true);
        m_ActionMapsAxis_DoFire = m_ActionMapsAxis.FindAction("DoFire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionMapsAxis
    private readonly InputActionMap m_ActionMapsAxis;
    private List<IActionMapsAxisActions> m_ActionMapsAxisActionsCallbackInterfaces = new List<IActionMapsAxisActions>();
    private readonly InputAction m_ActionMapsAxis_DoMoveForwardAxis;
    private readonly InputAction m_ActionMapsAxis_DOMoveRotate;
    private readonly InputAction m_ActionMapsAxis_DoFire;
    public struct ActionMapsAxisActions
    {
        private @InputActions m_Wrapper;
        public ActionMapsAxisActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DoMoveForwardAxis => m_Wrapper.m_ActionMapsAxis_DoMoveForwardAxis;
        public InputAction @DOMoveRotate => m_Wrapper.m_ActionMapsAxis_DOMoveRotate;
        public InputAction @DoFire => m_Wrapper.m_ActionMapsAxis_DoFire;
        public InputActionMap Get() { return m_Wrapper.m_ActionMapsAxis; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionMapsAxisActions set) { return set.Get(); }
        public void AddCallbacks(IActionMapsAxisActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionMapsAxisActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionMapsAxisActionsCallbackInterfaces.Add(instance);
            @DoMoveForwardAxis.started += instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.performed += instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.canceled += instance.OnDoMoveForwardAxis;
            @DOMoveRotate.started += instance.OnDOMoveRotate;
            @DOMoveRotate.performed += instance.OnDOMoveRotate;
            @DOMoveRotate.canceled += instance.OnDOMoveRotate;
            @DoFire.started += instance.OnDoFire;
            @DoFire.performed += instance.OnDoFire;
            @DoFire.canceled += instance.OnDoFire;
        }

        private void UnregisterCallbacks(IActionMapsAxisActions instance)
        {
            @DoMoveForwardAxis.started -= instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.performed -= instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.canceled -= instance.OnDoMoveForwardAxis;
            @DOMoveRotate.started -= instance.OnDOMoveRotate;
            @DOMoveRotate.performed -= instance.OnDOMoveRotate;
            @DOMoveRotate.canceled -= instance.OnDOMoveRotate;
            @DoFire.started -= instance.OnDoFire;
            @DoFire.performed -= instance.OnDoFire;
            @DoFire.canceled -= instance.OnDoFire;
        }

        public void RemoveCallbacks(IActionMapsAxisActions instance)
        {
            if (m_Wrapper.m_ActionMapsAxisActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionMapsAxisActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionMapsAxisActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionMapsAxisActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionMapsAxisActions @ActionMapsAxis => new ActionMapsAxisActions(this);
    public interface IActionMapsAxisActions
    {
        void OnDoMoveForwardAxis(InputAction.CallbackContext context);
        void OnDOMoveRotate(InputAction.CallbackContext context);
        void OnDoFire(InputAction.CallbackContext context);
    }
}
