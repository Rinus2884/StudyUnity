//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/step_1/InputActionCSharp.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionCSharp: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionCSharp()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionCSharp"",
    ""maps"": [
        {
            ""name"": ""ActionMapsAxis"",
            ""id"": ""6b6a7c34-9425-4d1c-b7db-e85d4861dff7"",
            ""actions"": [
                {
                    ""name"": ""DoMoveForwardAxis"",
                    ""type"": ""Value"",
                    ""id"": ""6dccbbfb-d2ae-4673-bf7f-737df37ae5e1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DoRotate"",
                    ""type"": ""Button"",
                    ""id"": ""341337a7-afaf-4d80-8ac5-4ba6719b3e5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d8879734-54c5-43b1-b7a3-fa0d99aab079"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoMoveForwardAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b4cdf9ab-1010-431a-bd9c-2260fb507b73"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controlSchemaAxisPC"",
                    ""action"": ""DoMoveForwardAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""70852eeb-91d2-432c-865a-a7e485c7b922"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controlSchemaAxisPC"",
                    ""action"": ""DoMoveForwardAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e193e820-ccc6-414d-ab33-4da209d54e17"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3e0ff97f-0020-4c4c-a915-daaf2f6e81fc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controlSchemaAxisPC"",
                    ""action"": ""DoRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""36699a11-dea0-42b8-9653-238e2a2bbc95"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controlSchemaAxisPC"",
                    ""action"": ""DoRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""controlSchemaAxisPC"",
            ""bindingGroup"": ""controlSchemaAxisPC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ActionMapsAxis
        m_ActionMapsAxis = asset.FindActionMap("ActionMapsAxis", throwIfNotFound: true);
        m_ActionMapsAxis_DoMoveForwardAxis = m_ActionMapsAxis.FindAction("DoMoveForwardAxis", throwIfNotFound: true);
        m_ActionMapsAxis_DoRotate = m_ActionMapsAxis.FindAction("DoRotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionMapsAxis
    private readonly InputActionMap m_ActionMapsAxis;
    private List<IActionMapsAxisActions> m_ActionMapsAxisActionsCallbackInterfaces = new List<IActionMapsAxisActions>();
    private readonly InputAction m_ActionMapsAxis_DoMoveForwardAxis;
    private readonly InputAction m_ActionMapsAxis_DoRotate;
    public struct ActionMapsAxisActions
    {
        private @InputActionCSharp m_Wrapper;
        public ActionMapsAxisActions(@InputActionCSharp wrapper) { m_Wrapper = wrapper; }
        public InputAction @DoMoveForwardAxis => m_Wrapper.m_ActionMapsAxis_DoMoveForwardAxis;
        public InputAction @DoRotate => m_Wrapper.m_ActionMapsAxis_DoRotate;
        public InputActionMap Get() { return m_Wrapper.m_ActionMapsAxis; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionMapsAxisActions set) { return set.Get(); }
        public void AddCallbacks(IActionMapsAxisActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionMapsAxisActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionMapsAxisActionsCallbackInterfaces.Add(instance);
            @DoMoveForwardAxis.started += instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.performed += instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.canceled += instance.OnDoMoveForwardAxis;
            @DoRotate.started += instance.OnDoRotate;
            @DoRotate.performed += instance.OnDoRotate;
            @DoRotate.canceled += instance.OnDoRotate;
        }

        private void UnregisterCallbacks(IActionMapsAxisActions instance)
        {
            @DoMoveForwardAxis.started -= instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.performed -= instance.OnDoMoveForwardAxis;
            @DoMoveForwardAxis.canceled -= instance.OnDoMoveForwardAxis;
            @DoRotate.started -= instance.OnDoRotate;
            @DoRotate.performed -= instance.OnDoRotate;
            @DoRotate.canceled -= instance.OnDoRotate;
        }

        public void RemoveCallbacks(IActionMapsAxisActions instance)
        {
            if (m_Wrapper.m_ActionMapsAxisActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionMapsAxisActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionMapsAxisActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionMapsAxisActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionMapsAxisActions @ActionMapsAxis => new ActionMapsAxisActions(this);
    private int m_controlSchemaAxisPCSchemeIndex = -1;
    public InputControlScheme controlSchemaAxisPCScheme
    {
        get
        {
            if (m_controlSchemaAxisPCSchemeIndex == -1) m_controlSchemaAxisPCSchemeIndex = asset.FindControlSchemeIndex("controlSchemaAxisPC");
            return asset.controlSchemes[m_controlSchemaAxisPCSchemeIndex];
        }
    }
    public interface IActionMapsAxisActions
    {
        void OnDoMoveForwardAxis(InputAction.CallbackContext context);
        void OnDoRotate(InputAction.CallbackContext context);
    }
}
